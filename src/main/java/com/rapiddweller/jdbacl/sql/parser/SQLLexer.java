// $ANTLR 3.3 Nov 30, 2010 12:45:30 /Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g 2012-06-05 11:38:26

package com.rapiddweller.jdbacl.sql.parser;


import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.DFA;
import org.antlr.runtime.EarlyExitException;
import org.antlr.runtime.Lexer;
import org.antlr.runtime.MismatchedSetException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;

import javax.annotation.processing.Generated;

/**
 * The type Sql lexer.
 */
@Generated("ANTLR") // this is code generated by ANTLR
@SuppressWarnings("all")
public class SQLLexer extends Lexer {
  /**
   * The constant EOF.
   */
  public static final int EOF = -1;
  /**
   * The constant T__62.
   */
  public static final int T__62 = 62;
  /**
   * The constant T__63.
   */
  public static final int T__63 = 63;
  /**
   * The constant T__64.
   */
  public static final int T__64 = 64;
  /**
   * The constant T__65.
   */
  public static final int T__65 = 65;
  /**
   * The constant T__66.
   */
  public static final int T__66 = 66;
  /**
   * The constant T__67.
   */
  public static final int T__67 = 67;
  /**
   * The constant T__68.
   */
  public static final int T__68 = 68;
  /**
   * The constant T__69.
   */
  public static final int T__69 = 69;
  /**
   * The constant T__70.
   */
  public static final int T__70 = 70;
  /**
   * The constant T__71.
   */
  public static final int T__71 = 71;
  /**
   * The constant T__72.
   */
  public static final int T__72 = 72;
  /**
   * The constant T__73.
   */
  public static final int T__73 = 73;
  /**
   * The constant T__74.
   */
  public static final int T__74 = 74;
  /**
   * The constant T__75.
   */
  public static final int T__75 = 75;
  /**
   * The constant T__76.
   */
  public static final int T__76 = 76;
  /**
   * The constant T__77.
   */
  public static final int T__77 = 77;
  /**
   * The constant T__78.
   */
  public static final int T__78 = 78;
  /**
   * The constant T__79.
   */
  public static final int T__79 = 79;
  /**
   * The constant T__80.
   */
  public static final int T__80 = 80;
  /**
   * The constant T__81.
   */
  public static final int T__81 = 81;
  /**
   * The constant T__82.
   */
  public static final int T__82 = 82;
  /**
   * The constant T__83.
   */
  public static final int T__83 = 83;
  /**
   * The constant T__84.
   */
  public static final int T__84 = 84;
  /**
   * The constant T__85.
   */
  public static final int T__85 = 85;
  /**
   * The constant T__86.
   */
  public static final int T__86 = 86;
  /**
   * The constant T__87.
   */
  public static final int T__87 = 87;
  /**
   * The constant T__88.
   */
  public static final int T__88 = 88;
  /**
   * The constant T__89.
   */
  public static final int T__89 = 89;
  /**
   * The constant T__90.
   */
  public static final int T__90 = 90;
  /**
   * The constant T__91.
   */
  public static final int T__91 = 91;
  /**
   * The constant T__92.
   */
  public static final int T__92 = 92;
  /**
   * The constant T__93.
   */
  public static final int T__93 = 93;
  /**
   * The constant T__94.
   */
  public static final int T__94 = 94;
  /**
   * The constant T__95.
   */
  public static final int T__95 = 95;
  /**
   * The constant T__96.
   */
  public static final int T__96 = 96;
  /**
   * The constant T__97.
   */
  public static final int T__97 = 97;
  /**
   * The constant T__98.
   */
  public static final int T__98 = 98;
  /**
   * The constant T__99.
   */
  public static final int T__99 = 99;
  /**
   * The constant T__100.
   */
  public static final int T__100 = 100;
  /**
   * The constant T__101.
   */
  public static final int T__101 = 101;
  /**
   * The constant T__102.
   */
  public static final int T__102 = 102;
  /**
   * The constant T__103.
   */
  public static final int T__103 = 103;
  /**
   * The constant T__104.
   */
  public static final int T__104 = 104;
  /**
   * The constant T__105.
   */
  public static final int T__105 = 105;
  /**
   * The constant T__106.
   */
  public static final int T__106 = 106;
  /**
   * The constant T__107.
   */
  public static final int T__107 = 107;
  /**
   * The constant T__108.
   */
  public static final int T__108 = 108;
  /**
   * The constant T__109.
   */
  public static final int T__109 = 109;
  /**
   * The constant T__110.
   */
  public static final int T__110 = 110;
  /**
   * The constant T__111.
   */
  public static final int T__111 = 111;
  /**
   * The constant T__112.
   */
  public static final int T__112 = 112;
  /**
   * The constant T__113.
   */
  public static final int T__113 = 113;
  /**
   * The constant T__114.
   */
  public static final int T__114 = 114;
  /**
   * The constant T__115.
   */
  public static final int T__115 = 115;
  /**
   * The constant T__116.
   */
  public static final int T__116 = 116;
  /**
   * The constant T__117.
   */
  public static final int T__117 = 117;
  /**
   * The constant T__118.
   */
  public static final int T__118 = 118;
  /**
   * The constant T__119.
   */
  public static final int T__119 = 119;
  /**
   * The constant T__120.
   */
  public static final int T__120 = 120;
  /**
   * The constant T__121.
   */
  public static final int T__121 = 121;
  /**
   * The constant T__122.
   */
  public static final int T__122 = 122;
  /**
   * The constant T__123.
   */
  public static final int T__123 = 123;
  /**
   * The constant T__124.
   */
  public static final int T__124 = 124;
  /**
   * The constant T__125.
   */
  public static final int T__125 = 125;
  /**
   * The constant T__126.
   */
  public static final int T__126 = 126;
  /**
   * The constant T__127.
   */
  public static final int T__127 = 127;
  /**
   * The constant T__128.
   */
  public static final int T__128 = 128;
  /**
   * The constant T__129.
   */
  public static final int T__129 = 129;
  /**
   * The constant T__130.
   */
  public static final int T__130 = 130;
  /**
   * The constant T__131.
   */
  public static final int T__131 = 131;
  /**
   * The constant T__132.
   */
  public static final int T__132 = 132;
  /**
   * The constant T__133.
   */
  public static final int T__133 = 133;
  /**
   * The constant T__134.
   */
  public static final int T__134 = 134;
  /**
   * The constant T__135.
   */
  public static final int T__135 = 135;
  /**
   * The constant T__136.
   */
  public static final int T__136 = 136;
  /**
   * The constant T__137.
   */
  public static final int T__137 = 137;
  /**
   * The constant T__138.
   */
  public static final int T__138 = 138;
  /**
   * The constant INT.
   */
  public static final int INT = 4;
  /**
   * The constant NOT.
   */
  public static final int NOT = 5;
  /**
   * The constant IDENTIFIER.
   */
  public static final int IDENTIFIER = 6;
  /**
   * The constant STRING.
   */
  public static final int STRING = 7;
  /**
   * The constant QUOTED_NAME.
   */
  public static final int QUOTED_NAME = 8;
  /**
   * The constant PRIMARY.
   */
  public static final int PRIMARY = 9;
  /**
   * The constant DEFAULT.
   */
  public static final int DEFAULT = 10;
  /**
   * The constant COMMENT.
   */
  public static final int COMMENT = 11;
  /**
   * The constant CREATE_TABLE.
   */
  public static final int CREATE_TABLE = 12;
  /**
   * The constant DROP_TABLE.
   */
  public static final int DROP_TABLE = 13;
  /**
   * The constant ALTER_TABLE.
   */
  public static final int ALTER_TABLE = 14;
  /**
   * The constant TABLE_NAME.
   */
  public static final int TABLE_NAME = 15;
  /**
   * The constant COLUMN_NAME.
   */
  public static final int COLUMN_NAME = 16;
  /**
   * The constant SIZE.
   */
  public static final int SIZE = 17;
  /**
   * The constant CREATE_SEQUENCE.
   */
  public static final int CREATE_SEQUENCE = 18;
  /**
   * The constant DROP_SEQUENCE.
   */
  public static final int DROP_SEQUENCE = 19;
  /**
   * The constant NAME_LIST.
   */
  public static final int NAME_LIST = 20;
  /**
   * The constant CREATE_INDEX.
   */
  public static final int CREATE_INDEX = 21;
  /**
   * The constant INDEX_NAME.
   */
  public static final int INDEX_NAME = 22;
  /**
   * The constant TABLE_DETAILS.
   */
  public static final int TABLE_DETAILS = 23;
  /**
   * The constant COLUMN_SPEC.
   */
  public static final int COLUMN_SPEC = 24;
  /**
   * The constant ORA_CONFIGS.
   */
  public static final int ORA_CONFIGS = 25;
  /**
   * The constant COMMENT_TABLE.
   */
  public static final int COMMENT_TABLE = 26;
  /**
   * The constant COMMENT_COLUMN.
   */
  public static final int COMMENT_COLUMN = 27;
  /**
   * The constant INVOCATION.
   */
  public static final int INVOCATION = 28;
  /**
   * The constant ARGUMENTS.
   */
  public static final int ARGUMENTS = 29;
  /**
   * The constant VALUE_LIST.
   */
  public static final int VALUE_LIST = 30;
  /**
   * The constant OR.
   */
  public static final int OR = 31;
  /**
   * The constant AND.
   */
  public static final int AND = 32;
  /**
   * The constant XOR.
   */
  public static final int XOR = 33;
  /**
   * The constant EQ.
   */
  public static final int EQ = 34;
  /**
   * The constant BANGEQ.
   */
  public static final int BANGEQ = 35;
  /**
   * The constant LTGT.
   */
  public static final int LTGT = 36;
  /**
   * The constant GT.
   */
  public static final int GT = 37;
  /**
   * The constant GE.
   */
  public static final int GE = 38;
  /**
   * The constant LT.
   */
  public static final int LT = 39;
  /**
   * The constant LE.
   */
  public static final int LE = 40;
  /**
   * The constant LIKE.
   */
  public static final int LIKE = 41;
  /**
   * The constant IS.
   */
  public static final int IS = 42;
  /**
   * The constant NULL.
   */
  public static final int NULL = 43;
  /**
   * The constant IN.
   */
  public static final int IN = 44;
  /**
   * The constant BETWEEN.
   */
  public static final int BETWEEN = 45;
  /**
   * The constant PLUS.
   */
  public static final int PLUS = 46;
  /**
   * The constant SUB.
   */
  public static final int SUB = 47;
  /**
   * The constant STAR.
   */
  public static final int STAR = 48;
  /**
   * The constant SLASH.
   */
  public static final int SLASH = 49;
  /**
   * The constant PERCENT.
   */
  public static final int PERCENT = 50;
  /**
   * The constant BARBAR.
   */
  public static final int BARBAR = 51;
  /**
   * The constant ROWID.
   */
  public static final int ROWID = 52;
  /**
   * The constant NUMBER.
   */
  public static final int NUMBER = 53;
  /**
   * The constant VARCHAR2.
   */
  public static final int VARCHAR2 = 54;
  /**
   * The constant NVARCHAR2.
   */
  public static final int NVARCHAR2 = 55;
  /**
   * The constant BYTE.
   */
  public static final int BYTE = 56;
  /**
   * The constant CHAR.
   */
  public static final int CHAR = 57;
  /**
   * The constant DATE.
   */
  public static final int DATE = 58;
  /**
   * The constant TIMESTAMP.
   */
  public static final int TIMESTAMP = 59;
  /**
   * The constant BEFORE.
   */
  public static final int BEFORE = 60;
  /**
   * The constant WS.
   */
  public static final int WS = 61;

  @Override
  public Token nextToken() {
    while (true) {
      state.token = null;
      state.channel = Token.DEFAULT_CHANNEL;
      state.tokenStartCharIndex = input.index();
      state.tokenStartCharPositionInLine = input.getCharPositionInLine();
      state.tokenStartLine = input.getLine();
      state.text = null;
      if (input.LA(1) == CharStream.EOF) {
        return Token.EOF_TOKEN;
      }
      try {
        mTokens();
        if (state.token == null) {
          emit();
        } else if (state.token == Token.SKIP_TOKEN) {
          continue;
        }
        return state.token;
      } catch (RecognitionException re) {
        reportError(re);
        throw new RuntimeException(getClass().getSimpleName() + " error", re); // or throw Error
      }
    }
  }


  // delegates
  // delegators

  /**
   * Instantiates a new Sql lexer.
   */
  public SQLLexer() {
    ;
  }

  /**
   * Instantiates a new Sql lexer.
   *
   * @param input the input
   */
  public SQLLexer(CharStream input) {
    this(input, new RecognizerSharedState());
  }

  /**
   * Instantiates a new Sql lexer.
   *
   * @param input the input
   * @param state the state
   */
  public SQLLexer(CharStream input, RecognizerSharedState state) {
    super(input, state);

  }

  public String getGrammarFileName() {
    return "/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g";
  }

  /**
   * M t __ 62.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__62"
  public final void mT__62() throws RecognitionException {
    try {
      int _type = T__62;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match(';');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__62"

  /**
   * M t __ 63.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__63"
  public final void mT__63() throws RecognitionException {
    try {
      int _type = T__63;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("CREATE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__63"

  /**
   * M t __ 64.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__64"
  public final void mT__64() throws RecognitionException {
    try {
      int _type = T__64;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("GLOBAL");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__64"

  /**
   * M t __ 65.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__65"
  public final void mT__65() throws RecognitionException {
    try {
      int _type = T__65;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      {
        match("TEMPORARY");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__65"

  /**
   * M t __ 66.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__66"
  public final void mT__66() throws RecognitionException {
    try {
      int _type = T__66;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      {
        match("TABLE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__66"

  /**
   * M t __ 67.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__67"
  public final void mT__67() throws RecognitionException {
    try {
      int _type = T__67;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      {
        match('(');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__67"

  /**
   * M t __ 68.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__68"
  public final void mT__68() throws RecognitionException {
    try {
      int _type = T__68;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      {
        match(')');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__68"

  /**
   * M t __ 69.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__69"
  public final void mT__69() throws RecognitionException {
    try {
      int _type = T__69;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      {
        match(',');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__69"

  /**
   * M t __ 70.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__70"
  public final void mT__70() throws RecognitionException {
    try {
      int _type = T__70;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      {
        match("NCHAR2");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__70"

  /**
   * M t __ 71.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__71"
  public final void mT__71() throws RecognitionException {
    try {
      int _type = T__71;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      {
        match("BLOB");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__71"

  /**
   * M t __ 72.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__72"
  public final void mT__72() throws RecognitionException {
    try {
      int _type = T__72;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      {
        match("CLOB");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__72"

  /**
   * M t __ 73.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__73"
  public final void mT__73() throws RecognitionException {
    try {
      int _type = T__73;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      {
        match("NCLOB");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__73"

  /**
   * M t __ 74.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__74"
  public final void mT__74() throws RecognitionException {
    try {
      int _type = T__74;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      {
        match("CONSTRAINT");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__74"

  /**
   * M t __ 75.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__75"
  public final void mT__75() throws RecognitionException {
    try {
      int _type = T__75;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      {
        match("KEY");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__75"

  /**
   * M t __ 76.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__76"
  public final void mT__76() throws RecognitionException {
    try {
      int _type = T__76;
      int _channel = DEFAULT_TOKEN_CHANNEL;
      {
        match("ORGANIZATION");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__76"

  /**
   * M t __ 77.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__77"
  public final void mT__77() throws RecognitionException {
    try {
      int _type = T__77;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("TABLESPACE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__77"

  /**
   * M t __ 78.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__78"
  public final void mT__78() throws RecognitionException {
    try {
      int _type = T__78;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("PCTUSED");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__78"

  /**
   * M t __ 79.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__79"
  public final void mT__79() throws RecognitionException {
    try {
      int _type = T__79;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("PCTFREE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__79"

  /**
   * M t __ 80.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__80"
  public final void mT__80() throws RecognitionException {
    try {
      int _type = T__80;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("INITRANS");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__80"

  /**
   * M t __ 81.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__81"
  public final void mT__81() throws RecognitionException {
    try {
      int _type = T__81;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("MAXTRANS");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__81"

  /**
   * M t __ 82.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__82"
  public final void mT__82() throws RecognitionException {
    try {
      int _type = T__82;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("COMPRESS");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__82"

  /**
   * M t __ 83.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__83"
  public final void mT__83() throws RecognitionException {
    try {
      int _type = T__83;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("ENABLE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__83"

  /**
   * M t __ 84.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__84"
  public final void mT__84() throws RecognitionException {
    try {
      int _type = T__84;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("ROW");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__84"

  /**
   * M t __ 85.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__85"
  public final void mT__85() throws RecognitionException {
    try {
      int _type = T__85;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("MOVEMENT");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__85"

  /**
   * M t __ 86.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__86"
  public final void mT__86() throws RecognitionException {
    try {
      int _type = T__86;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("DISABLE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__86"

  /**
   * M t __ 87.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__87"
  public final void mT__87() throws RecognitionException {
    try {
      int _type = T__87;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("ON");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__87"

  /**
   * M t __ 88.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__88"
  public final void mT__88() throws RecognitionException {
    try {
      int _type = T__88;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("COMMIT");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__88"

  /**
   * M t __ 89.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__89"
  public final void mT__89() throws RecognitionException {
    try {
      int _type = T__89;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("DELETE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__89"

  /**
   * M t __ 90.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__90"
  public final void mT__90() throws RecognitionException {
    try {
      int _type = T__90;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("ROWS");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__90"

  /**
   * M t __ 91.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__91"
  public final void mT__91() throws RecognitionException {
    try {
      int _type = T__91;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("STORAGE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__91"

  /**
   * M t __ 92.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__92"
  public final void mT__92() throws RecognitionException {
    try {
      int _type = T__92;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("INITIAL");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__92"

  /**
   * M t __ 93.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__93"
  public final void mT__93() throws RecognitionException {
    try {
      int _type = T__93;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("NEXT");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__93"

  /**
   * M t __ 94.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__94"
  public final void mT__94() throws RecognitionException {
    try {
      int _type = T__94;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("MINEXTENTS");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__94"

  /**
   * M t __ 95.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__95"
  public final void mT__95() throws RecognitionException {
    try {
      int _type = T__95;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("MAXEXTENTS");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__95"

  /**
   * M t __ 96.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__96"
  public final void mT__96() throws RecognitionException {
    try {
      int _type = T__96;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("PCTINCREASE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__96"

  /**
   * M t __ 97.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__97"
  public final void mT__97() throws RecognitionException {
    try {
      int _type = T__97;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("BUFFER_POOL");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__97"

  /**
   * M t __ 98.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__98"
  public final void mT__98() throws RecognitionException {
    try {
      int _type = T__98;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("PARTITION");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__98"

  /**
   * M t __ 99.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__99"
  public final void mT__99() throws RecognitionException {
    try {
      int _type = T__99;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("BY");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__99"

  /**
   * M t __ 100.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__100"
  public final void mT__100() throws RecognitionException {
    try {
      int _type = T__100;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("RANGE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__100"

  /**
   * M t __ 101.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__101"
  public final void mT__101() throws RecognitionException {
    try {
      int _type = T__101;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("HASH");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__101"

  /**
   * M t __ 102.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__102"
  public final void mT__102() throws RecognitionException {
    try {
      int _type = T__102;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("LIST");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__102"

  /**
   * M t __ 103.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__103"
  public final void mT__103() throws RecognitionException {
    try {
      int _type = T__103;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("SUBPARTITION");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__103"

  /**
   * M t __ 104.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__104"
  public final void mT__104() throws RecognitionException {
    try {
      int _type = T__104;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("PARTITIONS");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__104"

  /**
   * M t __ 105.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__105"
  public final void mT__105() throws RecognitionException {
    try {
      int _type = T__105;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("STORE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__105"

  /**
   * M t __ 106.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__106"
  public final void mT__106() throws RecognitionException {
    try {
      int _type = T__106;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("VALUES");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__106"

  /**
   * M t __ 107.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__107"
  public final void mT__107() throws RecognitionException {
    try {
      int _type = T__107;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("LESS");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__107"

  /**
   * M t __ 108.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__108"
  public final void mT__108() throws RecognitionException {
    try {
      int _type = T__108;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("THAN");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__108"

  /**
   * M t __ 109.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__109"
  public final void mT__109() throws RecognitionException {
    try {
      int _type = T__109;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("SUBPARTITIONS");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__109"

  /**
   * M t __ 110.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__110"
  public final void mT__110() throws RecognitionException {
    try {
      int _type = T__110;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("LOGGING");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__110"

  /**
   * M t __ 111.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__111"
  public final void mT__111() throws RecognitionException {
    try {
      int _type = T__111;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("NOLOGGING");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__111"

  /**
   * M t __ 112.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__112"
  public final void mT__112() throws RecognitionException {
    try {
      int _type = T__112;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("NOCOMPRESS");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__112"

  /**
   * M t __ 113.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__113"
  public final void mT__113() throws RecognitionException {
    try {
      int _type = T__113;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("CACHE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__113"

  /**
   * M t __ 114.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__114"
  public final void mT__114() throws RecognitionException {
    try {
      int _type = T__114;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("NOCACHE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__114"

  /**
   * M t __ 115.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__115"
  public final void mT__115() throws RecognitionException {
    try {
      int _type = T__115;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("NOPARALLEL");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__115"

  /**
   * M t __ 116.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__116"
  public final void mT__116() throws RecognitionException {
    try {
      int _type = T__116;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("MONITORING");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__116"

  /**
   * M t __ 117.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__117"
  public final void mT__117() throws RecognitionException {
    try {
      int _type = T__117;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("RETENTION");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__117"

  /**
   * M t __ 118.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__118"
  public final void mT__118() throws RecognitionException {
    try {
      int _type = T__118;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("LOB");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__118"

  /**
   * M t __ 119.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__119"
  public final void mT__119() throws RecognitionException {
    try {
      int _type = T__119;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("AS");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__119"

  /**
   * M t __ 120.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__120"
  public final void mT__120() throws RecognitionException {
    try {
      int _type = T__120;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("CHUNK");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__120"

  /**
   * M t __ 121.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__121"
  public final void mT__121() throws RecognitionException {
    try {
      int _type = T__121;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("PCTVERSION");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__121"

  /**
   * M t __ 122.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__122"
  public final void mT__122() throws RecognitionException {
    try {
      int _type = T__122;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("INDEX");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__122"

  /**
   * M t __ 123.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__123"
  public final void mT__123() throws RecognitionException {
    try {
      int _type = T__123;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("ALTER");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__123"

  /**
   * M t __ 124.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__124"
  public final void mT__124() throws RecognitionException {
    try {
      int _type = T__124;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("DROP");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__124"

  /**
   * M t __ 125.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__125"
  public final void mT__125() throws RecognitionException {
    try {
      int _type = T__125;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("CASCADE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__125"

  /**
   * M t __ 126.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__126"
  public final void mT__126() throws RecognitionException {
    try {
      int _type = T__126;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("ADD");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__126"

  /**
   * M t __ 127.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__127"
  public final void mT__127() throws RecognitionException {
    try {
      int _type = T__127;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("USING");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__127"

  /**
   * M t __ 128.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__128"
  public final void mT__128() throws RecognitionException {
    try {
      int _type = T__128;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("FOREIGN");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__128"

  /**
   * M t __ 129.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__129"
  public final void mT__129() throws RecognitionException {
    try {
      int _type = T__129;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("REFERENCES");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__129"

  /**
   * M t __ 130.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__130"
  public final void mT__130() throws RecognitionException {
    try {
      int _type = T__130;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("UNIQUE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__130"

  /**
   * M t __ 131.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__131"
  public final void mT__131() throws RecognitionException {
    try {
      int _type = T__131;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("CHECK");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__131"

  /**
   * M t __ 132.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__132"
  public final void mT__132() throws RecognitionException {
    try {
      int _type = T__132;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("CONSTRAINTS");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__132"

  /**
   * M t __ 133.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__133"
  public final void mT__133() throws RecognitionException {
    try {
      int _type = T__133;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("INDEXTYPE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__133"

  /**
   * M t __ 134.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__134"
  public final void mT__134() throws RecognitionException {
    try {
      int _type = T__134;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("SEQUENCE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__134"

  /**
   * M t __ 135.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__135"
  public final void mT__135() throws RecognitionException {
    try {
      int _type = T__135;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("COMMENT");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__135"

  /**
   * M t __ 136.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__136"
  public final void mT__136() throws RecognitionException {
    try {
      int _type = T__136;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("COLUMN");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__136"

  /**
   * M t __ 137.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__137"
  public final void mT__137() throws RecognitionException {
    try {
      int _type = T__137;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match('.');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__137"

  /**
   * M t __ 138.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "T__138"
  public final void mT__138() throws RecognitionException {
    try {
      int _type = T__138;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("TRIGGER");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "T__138"

  /**
   * M create table.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "CREATE_TABLE"
  public final void mCREATE_TABLE() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "CREATE_TABLE"

  /**
   * M drop table.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "DROP_TABLE"
  public final void mDROP_TABLE() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "DROP_TABLE"

  /**
   * M alter table.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "ALTER_TABLE"
  public final void mALTER_TABLE() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "ALTER_TABLE"

  /**
   * M table name.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "TABLE_NAME"
  public final void mTABLE_NAME() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "TABLE_NAME"

  /**
   * M column name.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "COLUMN_NAME"
  public final void mCOLUMN_NAME() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "COLUMN_NAME"

  /**
   * M size.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "SIZE"
  public final void mSIZE() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "SIZE"

  /**
   * M create sequence.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "CREATE_SEQUENCE"
  public final void mCREATE_SEQUENCE() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "CREATE_SEQUENCE"

  /**
   * M drop sequence.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "DROP_SEQUENCE"
  public final void mDROP_SEQUENCE() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "DROP_SEQUENCE"

  /**
   * M name list.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "NAME_LIST"
  public final void mNAME_LIST() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "NAME_LIST"

  /**
   * M create index.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "CREATE_INDEX"
  public final void mCREATE_INDEX() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "CREATE_INDEX"

  /**
   * M index name.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "INDEX_NAME"
  public final void mINDEX_NAME() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "INDEX_NAME"

  /**
   * M table details.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "TABLE_DETAILS"
  public final void mTABLE_DETAILS() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "TABLE_DETAILS"

  /**
   * M column spec.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "COLUMN_SPEC"
  public final void mCOLUMN_SPEC() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "COLUMN_SPEC"

  /**
   * M ora configs.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "ORA_CONFIGS"
  public final void mORA_CONFIGS() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "ORA_CONFIGS"

  /**
   * M comment table.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "COMMENT_TABLE"
  public final void mCOMMENT_TABLE() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "COMMENT_TABLE"

  /**
   * M comment column.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "COMMENT_COLUMN"
  public final void mCOMMENT_COLUMN() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "COMMENT_COLUMN"

  /**
   * M invocation.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "INVOCATION"
  public final void mINVOCATION() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "INVOCATION"

  /**
   * M arguments.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "ARGUMENTS"
  public final void mARGUMENTS() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "ARGUMENTS"

  /**
   * M value list.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "VALUE_LIST"
  public final void mVALUE_LIST() throws RecognitionException {
    try {


      {
      }

    } finally {
    }
  }
  // $ANTLR end "VALUE_LIST"

  /**
   * M or.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "OR"
  public final void mOR() throws RecognitionException {
    try {
      int _type = OR;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("OR");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "OR"

  /**
   * M and.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "AND"
  public final void mAND() throws RecognitionException {
    try {
      int _type = AND;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("AND");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "AND"

  /**
   * M xor.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "XOR"
  public final void mXOR() throws RecognitionException {
    try {
      int _type = XOR;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("XOR");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "XOR"

  /**
   * M eq.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "EQ"
  public final void mEQ() throws RecognitionException {
    try {
      int _type = EQ;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match('=');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "EQ"

  /**
   * M bangeq.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "BANGEQ"
  public final void mBANGEQ() throws RecognitionException {
    try {
      int _type = BANGEQ;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("!=");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "BANGEQ"

  /**
   * M ltgt.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "LTGT"
  public final void mLTGT() throws RecognitionException {
    try {
      int _type = LTGT;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("<>");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "LTGT"

  /**
   * M gt.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "GT"
  public final void mGT() throws RecognitionException {
    try {
      int _type = GT;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match('>');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "GT"

  /**
   * M ge.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "GE"
  public final void mGE() throws RecognitionException {
    try {
      int _type = GE;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match(">=");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "GE"

  /**
   * M lt.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "LT"
  public final void mLT() throws RecognitionException {
    try {
      int _type = LT;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match('<');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "LT"

  /**
   * M le.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "LE"
  public final void mLE() throws RecognitionException {
    try {
      int _type = LE;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("<=");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "LE"

  /**
   * M like.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "LIKE"
  public final void mLIKE() throws RecognitionException {
    try {
      int _type = LIKE;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("LIKE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "LIKE"

  /**
   * M is.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "IS"
  public final void mIS() throws RecognitionException {
    try {
      int _type = IS;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("IS");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "IS"

  /**
   * M not.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "NOT"
  public final void mNOT() throws RecognitionException {
    try {
      int _type = NOT;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("NOT");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "NOT"

  /**
   * M null.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "NULL"
  public final void mNULL() throws RecognitionException {
    try {
      int _type = NULL;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("NULL");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "NULL"

  /**
   * M in.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "IN"
  public final void mIN() throws RecognitionException {
    try {
      int _type = IN;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("IN");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "IN"

  /**
   * M between.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "BETWEEN"
  public final void mBETWEEN() throws RecognitionException {
    try {
      int _type = BETWEEN;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("BETWEEN");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "BETWEEN"

  /**
   * M plus.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "PLUS"
  public final void mPLUS() throws RecognitionException {
    try {
      int _type = PLUS;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match('+');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "PLUS"

  /**
   * M sub.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "SUB"
  public final void mSUB() throws RecognitionException {
    try {
      int _type = SUB;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match('-');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "SUB"

  /**
   * M star.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "STAR"
  public final void mSTAR() throws RecognitionException {
    try {
      int _type = STAR;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match('*');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "STAR"

  /**
   * M slash.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "SLASH"
  public final void mSLASH() throws RecognitionException {
    try {
      int _type = SLASH;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match('/');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "SLASH"

  /**
   * M percent.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "PERCENT"
  public final void mPERCENT() throws RecognitionException {
    try {
      int _type = PERCENT;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match('%');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "PERCENT"

  /**
   * M barbar.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "BARBAR"
  public final void mBARBAR() throws RecognitionException {
    try {
      int _type = BARBAR;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("||");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "BARBAR"

  /**
   * M rowid.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "ROWID"
  public final void mROWID() throws RecognitionException {
    try {
      int _type = ROWID;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("ROWID");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "ROWID"

  /**
   * M number.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "NUMBER"
  public final void mNUMBER() throws RecognitionException {
    try {
      int _type = NUMBER;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("NUMBER");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "NUMBER"

  /**
   * M varchar 2.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "VARCHAR2"
  public final void mVARCHAR2() throws RecognitionException {
    try {
      int _type = VARCHAR2;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("VARCHAR2");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "VARCHAR2"

  /**
   * M nvarchar 2.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "NVARCHAR2"
  public final void mNVARCHAR2() throws RecognitionException {
    try {
      int _type = NVARCHAR2;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("NVARCHAR2");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "NVARCHAR2"

  /**
   * M byte.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "BYTE"
  public final void mBYTE() throws RecognitionException {
    try {
      int _type = BYTE;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("BYTE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "BYTE"

  /**
   * M char.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "CHAR"
  public final void mCHAR() throws RecognitionException {
    try {
      int _type = CHAR;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("CHAR");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "CHAR"

  /**
   * M date.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "DATE"
  public final void mDATE() throws RecognitionException {
    try {
      int _type = DATE;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("DATE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "DATE"

  /**
   * M timestamp.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "TIMESTAMP"
  public final void mTIMESTAMP() throws RecognitionException {
    try {
      int _type = TIMESTAMP;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("TIMESTAMP");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "TIMESTAMP"

  /**
   * M before.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "BEFORE"
  public final void mBEFORE() throws RecognitionException {
    try {
      int _type = BEFORE;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("BEFORE");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "BEFORE"

  /**
   * M primary.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "PRIMARY"
  public final void mPRIMARY() throws RecognitionException {
    try {
      int _type = PRIMARY;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("PRIMARY");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "PRIMARY"

  /**
   * M default.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "DEFAULT"
  public final void mDEFAULT() throws RecognitionException {
    try {
      int _type = DEFAULT;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match("DEFAULT");


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "DEFAULT"

  /**
   * M identifier.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "IDENTIFIER"
  public final void mIDENTIFIER() throws RecognitionException {
    try {
      int _type = IDENTIFIER;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        if ((input.LA(1) >= 'A' && input.LA(1) <= 'Z') || input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z')) {
          input.consume();

        } else {
          MismatchedSetException mse = new MismatchedSetException(null, input);
          recover(mse);
          throw mse;
        }


        loop1:
        do {
          int alt1 = 2;
          int LA1_0 = input.LA(1);

          if ((LA1_0 == '$' || (LA1_0 >= '0' && LA1_0 <= '9') || (LA1_0 >= 'A' && LA1_0 <= 'Z') || LA1_0 == '_' || (LA1_0 >= 'a' && LA1_0 <= 'z'))) {
            alt1 = 1;
          }


          switch (alt1) {
            case 1: {
              if (input.LA(1) == '$' || (input.LA(1) >= '0' && input.LA(1) <= '9') || (input.LA(1) >= 'A' && input.LA(1) <= 'Z') ||
                  input.LA(1) == '_' || (input.LA(1) >= 'a' && input.LA(1) <= 'z')) {
                input.consume();

              } else {
                MismatchedSetException mse = new MismatchedSetException(null, input);
                recover(mse);
                throw mse;
              }


            }
            break;

            default:
              break loop1;
          }
        } while (true);


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "IDENTIFIER"

  /**
   * M int.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "INT"
  public final void mINT() throws RecognitionException {
    try {
      int _type = INT;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {

        int cnt2 = 0;
        loop2:
        do {
          int alt2 = 2;
          int LA2_0 = input.LA(1);

          if (((LA2_0 >= '0' && LA2_0 <= '9'))) {
            alt2 = 1;
          }


          switch (alt2) {
            case 1: {
              matchRange('0', '9');

            }
            break;

            default:
              if (cnt2 >= 1) {
                break loop2;
              }
              EarlyExitException eee =
                  new EarlyExitException(2, input);
              throw eee;
          }
          cnt2++;
        } while (true);


      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "INT"

  /**
   * M comment.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "COMMENT"
  public final void mCOMMENT() throws RecognitionException {
    try {
      int _type = COMMENT;
      int _channel = DEFAULT_TOKEN_CHANNEL;

      int alt6 = 2;
      int LA6_0 = input.LA(1);

      if ((LA6_0 == '-')) {
        alt6 = 1;
      } else if ((LA6_0 == '/')) {
        alt6 = 2;
      } else {
        NoViableAltException nvae =
            new NoViableAltException("", 6, 0, input);

        throw nvae;
      }
      switch (alt6) {
        case 1: {
          match("--");


          loop3:
          do {
            int alt3 = 2;
            int LA3_0 = input.LA(1);

            if (((LA3_0 >= '\u0000' && LA3_0 <= '\t') || (LA3_0 >= '\u000B' && LA3_0 <= '\f') || (LA3_0 >= '\u000E' && LA3_0 <= '\uFFFF'))) {
              alt3 = 1;
            }


            switch (alt3) {
              case 1: {
                if ((input.LA(1) >= '\u0000' && input.LA(1) <= '\t') || (input.LA(1) >= '\u000B' && input.LA(1) <= '\f') ||
                    (input.LA(1) >= '\u000E' && input.LA(1) <= '\uFFFF')) {
                  input.consume();

                } else {
                  MismatchedSetException mse = new MismatchedSetException(null, input);
                  recover(mse);
                  throw mse;
                }


              }
              break;

              default:
                break loop3;
            }
          } while (true);


          int alt4 = 2;
          int LA4_0 = input.LA(1);

          if ((LA4_0 == '\r')) {
            alt4 = 1;
          }
          switch (alt4) {
            case 1: {
              match('\r');

            }
            break;

          }

          match('\n');
          _channel = HIDDEN;

        }
        break;
        case 2: {
          match("/*");


          loop5:
          do {
            int alt5 = 2;
            int LA5_0 = input.LA(1);

            if ((LA5_0 == '*')) {
              int LA5_1 = input.LA(2);

              if ((LA5_1 == '/')) {
                alt5 = 2;
              } else if (((LA5_1 >= '\u0000' && LA5_1 <= '.') || (LA5_1 >= '0' && LA5_1 <= '\uFFFF'))) {
                alt5 = 1;
              }


            } else if (((LA5_0 >= '\u0000' && LA5_0 <= ')') || (LA5_0 >= '+' && LA5_0 <= '\uFFFF'))) {
              alt5 = 1;
            }


            switch (alt5) {
              case 1: {
                matchAny();

              }
              break;

              default:
                break loop5;
            }
          } while (true);

          match("*/");

          _channel = HIDDEN;

        }
        break;

      }
      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "COMMENT"

  /**
   * M ws.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "WS"
  public final void mWS() throws RecognitionException {
    try {
      int _type = WS;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        if ((input.LA(1) >= '\t' && input.LA(1) <= '\n') || input.LA(1) == '\r' || input.LA(1) == ' ') {
          input.consume();

        } else {
          MismatchedSetException mse = new MismatchedSetException(null, input);
          recover(mse);
          throw mse;
        }

        _channel = HIDDEN;

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "WS"

  /**
   * M string.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "STRING"
  public final void mSTRING() throws RecognitionException {
    try {
      int _type = STRING;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match('\'');

        loop7:
        do {
          int alt7 = 2;
          int LA7_0 = input.LA(1);

          if (((LA7_0 >= '\u0000' && LA7_0 <= '&') || (LA7_0 >= '(' && LA7_0 <= '[') || (LA7_0 >= ']' && LA7_0 <= '\uFFFF'))) {
            alt7 = 1;
          }


          switch (alt7) {
            case 1: {
              if ((input.LA(1) >= '\u0000' && input.LA(1) <= '&') || (input.LA(1) >= '(' && input.LA(1) <= '[') ||
                  (input.LA(1) >= ']' && input.LA(1) <= '\uFFFF')) {
                input.consume();

              } else {
                MismatchedSetException mse = new MismatchedSetException(null, input);
                recover(mse);
                throw mse;
              }


            }
            break;

            default:
              break loop7;
          }
        } while (true);

        match('\'');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "STRING"

  /**
   * M quoted name.
   *
   * @throws RecognitionException the recognition exception
   */
// $ANTLR start "QUOTED_NAME"
  public final void mQUOTED_NAME() throws RecognitionException {
    try {
      int _type = QUOTED_NAME;
      int _channel = DEFAULT_TOKEN_CHANNEL;


      {
        match('\"');

        loop8:
        do {
          int alt8 = 2;
          int LA8_0 = input.LA(1);

          if (((LA8_0 >= '\u0000' && LA8_0 <= '!') || (LA8_0 >= '#' && LA8_0 <= '[') || (LA8_0 >= ']' && LA8_0 <= '\uFFFF'))) {
            alt8 = 1;
          }


          switch (alt8) {
            case 1: {
              if ((input.LA(1) >= '\u0000' && input.LA(1) <= '!') || (input.LA(1) >= '#' && input.LA(1) <= '[') ||
                  (input.LA(1) >= ']' && input.LA(1) <= '\uFFFF')) {
                input.consume();

              } else {
                MismatchedSetException mse = new MismatchedSetException(null, input);
                recover(mse);
                throw mse;
              }


            }
            break;

            default:
              break loop8;
          }
        } while (true);

        match('\"');

      }

      state.type = _type;
      state.channel = _channel;
    } finally {
    }
  }
  // $ANTLR end "QUOTED_NAME"

  public void mTokens() throws RecognitionException {

    int alt9 = 116;
    alt9 = dfa9.predict(input);
    switch (alt9) {
      case 1: {
        mT__62();

      }
      break;
      case 2: {
        mT__63();

      }
      break;
      case 3: {
        mT__64();

      }
      break;
      case 4: {
        mT__65();

      }
      break;
      case 5: {
        mT__66();

      }
      break;
      case 6: {
        mT__67();

      }
      break;
      case 7: {
        mT__68();

      }
      break;
      case 8: {
        mT__69();

      }
      break;
      case 9: {
        mT__70();

      }
      break;
      case 10: {
        mT__71();

      }
      break;
      case 11: {
        mT__72();

      }
      break;
      case 12: {
        mT__73();

      }
      break;
      case 13: {
        mT__74();

      }
      break;
      case 14: {
        mT__75();

      }
      break;
      case 15: {
        mT__76();

      }
      break;
      case 16: {
        mT__77();

      }
      break;
      case 17: {
        mT__78();

      }
      break;
      case 18: {
        mT__79();

      }
      break;
      case 19: {
        mT__80();

      }
      break;
      case 20: {
        mT__81();

      }
      break;
      case 21: {
        mT__82();

      }
      break;
      case 22: {
        mT__83();

      }
      break;
      case 23: {
        mT__84();

      }
      break;
      case 24: {
        mT__85();

      }
      break;
      case 25: {
        mT__86();

      }
      break;
      case 26: {
        mT__87();

      }
      break;
      case 27: {
        mT__88();

      }
      break;
      case 28: {
        mT__89();

      }
      break;
      case 29: {
        mT__90();

      }
      break;
      case 30: {
        mT__91();

      }
      break;
      case 31: {
        mT__92();

      }
      break;
      case 32: {
        mT__93();

      }
      break;
      case 33: {
        mT__94();

      }
      break;
      case 34: {
        mT__95();

      }
      break;
      case 35: {
        mT__96();

      }
      break;
      case 36: {
        mT__97();

      }
      break;
      case 37: {
        mT__98();

      }
      break;
      case 38: {
        mT__99();

      }
      break;
      case 39: {
        mT__100();

      }
      break;
      case 40: {
        mT__101();

      }
      break;
      case 41: {
        mT__102();

      }
      break;
      case 42: {
        mT__103();

      }
      break;
      case 43: {
        mT__104();

      }
      break;
      case 44: {
        mT__105();

      }
      break;
      case 45: {
        mT__106();

      }
      break;
      case 46: {
        mT__107();

      }
      break;
      case 47: {
        mT__108();

      }
      break;
      case 48: {
        mT__109();

      }
      break;
      case 49: {
        mT__110();

      }
      break;
      case 50: {
        mT__111();

      }
      break;
      case 51: {
        mT__112();

      }
      break;
      case 52: {
        mT__113();

      }
      break;
      case 53: {
        mT__114();

      }
      break;
      case 54: {
        mT__115();

      }
      break;
      case 55: {
        mT__116();

      }
      break;
      case 56: {
        mT__117();

      }
      break;
      case 57: {
        mT__118();

      }
      break;
      case 58: {
        mT__119();

      }
      break;
      case 59: {
        mT__120();

      }
      break;
      case 60: {
        mT__121();

      }
      break;
      case 61: {
        mT__122();

      }
      break;
      case 62: {
        mT__123();

      }
      break;
      case 63: {
        mT__124();

      }
      break;
      case 64: {
        mT__125();

      }
      break;
      case 65: {
        mT__126();

      }
      break;
      case 66: {
        mT__127();

      }
      break;
      case 67: {
        mT__128();

      }
      break;
      case 68: {
        mT__129();

      }
      break;
      case 69: {
        mT__130();

      }
      break;
      case 70: {
        mT__131();

      }
      break;
      case 71: {
        mT__132();

      }
      break;
      case 72: {
        mT__133();

      }
      break;
      case 73: {
        mT__134();

      }
      break;
      case 74: {
        mT__135();

      }
      break;
      case 75: {
        mT__136();

      }
      break;
      case 76: {
        mT__137();

      }
      break;
      case 77: {
        mT__138();

      }
      break;
      case 78: {
        mOR();

      }
      break;
      case 79: {
        mAND();

      }
      break;
      case 80: {
        mXOR();

      }
      break;
      case 81: {
        mEQ();

      }
      break;
      case 82: {
        mBANGEQ();

      }
      break;
      case 83: {
        mLTGT();

      }
      break;
      case 84: {
        mGT();

      }
      break;
      case 85: {
        mGE();

      }
      break;
      case 86: {
        mLT();

      }
      break;
      case 87: {
        mLE();

      }
      break;
      case 88: {
        mLIKE();

      }
      break;
      case 89: {
        mIS();

      }
      break;
      case 90: {
        mNOT();

      }
      break;
      case 91: {
        mNULL();

      }
      break;
      case 92: {
        mIN();

      }
      break;
      case 93: {
        mBETWEEN();

      }
      break;
      case 94: {
        mPLUS();

      }
      break;
      case 95: {
        mSUB();

      }
      break;
      case 96: {
        mSTAR();

      }
      break;
      case 97: {
        mSLASH();

      }
      break;
      case 98: {
        mPERCENT();

      }
      break;
      case 99: {
        mBARBAR();

      }
      break;
      case 100: {
        mROWID();

      }
      break;
      case 101: {
        mNUMBER();

      }
      break;
      case 102: {
        mVARCHAR2();

      }
      break;
      case 103: {
        mNVARCHAR2();

      }
      break;
      case 104: {
        mBYTE();

      }
      break;
      case 105: {
        mCHAR();

      }
      break;
      case 106: {
        mDATE();

      }
      break;
      case 107: {
        mTIMESTAMP();

      }
      break;
      case 108: {
        mBEFORE();

      }
      break;
      case 109: {
        mPRIMARY();

      }
      break;
      case 110: {
        mDEFAULT();

      }
      break;
      case 111: {
        mIDENTIFIER();

      }
      break;
      case 112: {
        mINT();

      }
      break;
      case 113: {
        mCOMMENT();

      }
      break;
      case 114: {
        mWS();

      }
      break;
      case 115: {
        mSTRING();

      }
      break;
      case 116: {
        mQUOTED_NAME();

      }
      break;

    }

  }


  /**
   * The Dfa 9.
   */
  protected DFA9 dfa9 = new DFA9(this);
  /**
   * The Dfa 9 eot s.
   */
  static final String DFA9_eotS =
      "\2\uffff\3\45\3\uffff\21\45\1\uffff\1\45\2\uffff\1\143\1\145\1\uffff" +
          "\1\147\1\uffff\1\150\7\uffff\22\45\1\u0086\2\45\1\u008b\1\u008c" +
          "\3\45\1\u0092\1\u0093\23\45\1\u00ad\7\45\10\uffff\26\45\1\u00cd" +
          "\6\45\1\uffff\2\45\1\u00d6\1\45\2\uffff\5\45\2\uffff\5\45\1\u00e8" +
          "\20\45\1\u00f9\2\45\1\uffff\1\45\1\u00fd\1\u00fe\3\45\1\u0102\1" +
          "\45\1\u0104\10\45\1\u010e\3\45\1\u0112\4\45\1\u0117\4\45\1\uffff" +
          "\1\u011c\2\45\1\u011f\1\45\1\u0121\2\45\1\uffff\17\45\1\u0134\1" +
          "\45\1\uffff\6\45\1\u013c\1\u013d\3\45\1\u0142\1\u0143\1\u0144\1" +
          "\u0145\1\45\1\uffff\3\45\2\uffff\3\45\1\uffff\1\45\1\uffff\5\45" +
          "\1\u0153\1\45\1\u0155\1\u0156\1\uffff\2\45\1\u015a\1\uffff\3\45" +
          "\1\u015e\1\uffff\4\45\1\uffff\2\45\1\uffff\1\45\1\uffff\13\45\1" +
          "\u0172\6\45\1\uffff\1\u0179\1\u017a\5\45\2\uffff\1\45\1\u0181\2" +
          "\45\4\uffff\3\45\1\u0187\1\u0188\2\45\1\u018b\2\45\1\u018e\1\45" +
          "\1\u0190\1\uffff\1\45\2\uffff\1\u0192\2\45\1\uffff\2\45\1\u0197" +
          "\1\uffff\4\45\1\u019c\3\45\1\u01a0\12\45\1\uffff\5\45\1\u01b0\2" +
          "\uffff\3\45\1\u01b4\2\45\1\uffff\3\45\1\u01ba\1\45\2\uffff\1\u01bc" +
          "\1\45\1\uffff\2\45\1\uffff\1\u01c0\1\uffff\1\u01c1\1\uffff\2\45" +
          "\1\u01c4\1\45\1\uffff\2\45\1\u01c8\1\45\1\uffff\2\45\1\u01cc\1\uffff" +
          "\1\45\1\u01ce\1\u01cf\3\45\1\u01d3\1\45\1\u01d5\6\45\1\uffff\2\45" +
          "\1\u01de\1\uffff\1\u01df\1\u01e0\2\45\1\u01e3\1\uffff\1\45\1\uffff" +
          "\1\u01e5\1\45\1\u01e7\2\uffff\2\45\1\uffff\3\45\1\uffff\3\45\1\uffff" +
          "\1\45\2\uffff\3\45\1\uffff\1\u01f4\1\uffff\1\45\1\u01f6\1\45\1\u01f8" +
          "\4\45\3\uffff\1\45\1\u01fe\1\uffff\1\u01ff\1\uffff\1\45\1\uffff" +
          "\1\u0201\1\45\1\u0203\1\u0204\2\45\1\u0207\4\45\1\u020d\1\uffff" +
          "\1\u020e\1\uffff\1\45\1\uffff\2\45\1\u0212\2\45\2\uffff\1\u0216" +
          "\1\uffff\1\u0217\2\uffff\1\u0218\1\u0219\1\uffff\3\45\1\u021d\1" +
          "\u021e\2\uffff\1\u021f\1\u0220\1\u0221\1\uffff\1\u0222\1\45\1\u0224" +
          "\4\uffff\1\u0225\1\45\1\u0227\6\uffff\1\45\2\uffff\1\u0229\1\uffff" +
          "\1\u022b\1\uffff\1\u022c\2\uffff";
  /**
   * The Dfa 9 eof s.
   */
  static final String DFA9_eofS =
      "\u022d\uffff";
  /**
   * The Dfa 9 min s.
   */
  static final String DFA9_minS =
      "\1\11\1\uffff\1\101\1\114\1\101\3\uffff\1\103\2\105\1\116\1\101" +
          "\1\116\1\101\1\116\2\101\1\105\1\101\1\105\1\101\1\104\1\116\1\117" +
          "\1\uffff\1\117\2\uffff\2\75\1\uffff\1\55\1\uffff\1\52\7\uffff\1" +
          "\105\1\117\1\114\1\103\1\101\1\117\1\115\1\102\1\101\1\111\1\115" +
          "\1\110\1\130\1\103\1\114\1\101\1\117\1\106\1\44\1\106\1\131\2\44" +
          "\1\124\1\122\1\111\2\44\1\130\2\116\1\101\1\127\1\116\1\106\1\123" +
          "\1\106\1\117\1\124\1\117\1\102\1\121\1\123\1\113\1\123\1\102\1\114" +
          "\1\44\1\124\2\104\2\111\2\122\10\uffff\1\101\1\102\1\123\1\115\1" +
          "\125\1\110\1\103\1\116\1\103\1\122\1\102\1\120\1\114\1\116\1\107" +
          "\1\105\1\101\1\117\1\124\1\117\2\101\1\44\1\114\1\102\1\122\1\102" +
          "\1\106\1\105\1\uffff\1\127\1\117\1\44\1\101\2\uffff\1\106\1\124" +
          "\1\115\1\124\1\105\2\uffff\2\105\1\111\1\105\1\102\1\44\1\107\2" +
          "\105\1\101\1\105\1\101\1\120\1\105\1\122\1\120\1\125\1\110\1\124" +
          "\1\105\1\123\1\107\1\44\1\125\1\103\1\uffff\1\105\2\44\1\116\1\121" +
          "\1\105\1\44\1\124\1\44\1\124\1\122\1\105\1\115\1\105\1\101\2\113" +
          "\1\44\1\101\1\117\1\105\1\44\1\107\1\123\1\122\1\102\1\44\1\107" +
          "\1\115\1\103\1\122\1\uffff\1\44\1\105\1\103\1\44\1\105\1\44\1\105" +
          "\1\122\1\uffff\1\116\1\123\1\122\1\116\1\105\1\111\1\101\1\111\1" +
          "\130\1\122\1\130\1\115\1\124\1\130\1\114\1\44\1\104\1\uffff\1\105" +
          "\1\116\1\122\1\102\1\124\1\125\2\44\2\101\1\105\4\44\1\111\1\uffff" +
          "\1\105\1\110\1\122\2\uffff\1\107\1\125\1\111\1\uffff\1\105\1\uffff" +
          "\1\122\1\105\1\124\2\116\1\44\1\104\2\44\1\uffff\1\114\1\122\1\44" +
          "\1\uffff\1\105\1\124\1\62\1\44\1\uffff\1\107\1\120\1\110\1\101\1" +
          "\uffff\1\122\1\110\1\uffff\1\122\1\uffff\2\105\1\111\2\105\1\103" +
          "\1\122\1\124\1\122\2\101\1\44\1\101\1\124\1\105\1\117\1\124\1\105" +
          "\1\uffff\2\44\1\124\1\105\1\114\1\105\1\114\2\uffff\1\107\1\44\1" +
          "\122\1\116\4\uffff\1\116\1\123\1\101\2\44\1\105\1\107\1\44\1\101" +
          "\1\123\1\44\1\124\1\44\1\uffff\1\105\2\uffff\1\44\1\101\1\120\1" +
          "\uffff\1\122\1\101\1\44\1\uffff\1\111\1\122\1\105\1\114\1\44\1\101" +
          "\1\137\1\116\1\44\1\132\1\104\1\105\1\122\1\123\1\111\1\131\1\116" +
          "\1\114\1\131\1\uffff\1\116\1\105\1\116\1\122\1\105\1\44\2\uffff" +
          "\1\111\1\116\1\105\1\44\1\124\1\105\1\uffff\1\124\1\103\1\107\1" +
          "\44\1\122\2\uffff\1\44\1\116\1\uffff\1\111\1\123\1\uffff\1\44\1" +
          "\uffff\1\44\1\uffff\1\122\1\101\1\44\1\115\1\uffff\1\116\1\105\1" +
          "\44\1\114\1\uffff\1\122\1\120\1\44\1\uffff\1\101\2\44\1\105\1\111" +
          "\1\117\1\44\1\123\1\44\1\120\1\123\1\116\1\124\1\111\1\116\1\uffff" +
          "\1\117\1\103\1\44\1\uffff\2\44\1\111\1\105\1\44\1\uffff\1\62\1\uffff" +
          "\1\44\1\116\1\44\2\uffff\1\131\1\103\1\uffff\1\120\1\107\1\123\1" +
          "\uffff\1\105\1\62\1\117\1\uffff\1\124\2\uffff\1\101\1\117\1\116" +
          "\1\uffff\1\44\1\uffff\1\105\1\44\1\124\1\44\1\116\1\124\1\116\1" +
          "\105\3\uffff\1\124\1\44\1\uffff\1\44\1\uffff\1\124\1\uffff\1\44" +
          "\1\105\2\44\1\123\1\114\1\44\1\117\1\111\1\123\1\116\1\44\1\uffff" +
          "\1\44\1\uffff\1\123\1\uffff\1\107\1\123\1\44\1\123\1\111\2\uffff" +
          "\1\44\1\uffff\1\44\2\uffff\2\44\1\uffff\1\114\1\117\1\105\2\44\2" +
          "\uffff\3\44\1\uffff\1\44\1\117\1\44\4\uffff\1\44\1\116\1\44\6\uffff" +
          "\1\116\2\uffff\1\44\1\uffff\1\44\1\uffff\1\44\2\uffff";
  /**
   * The Dfa 9 max s.
   */
  static final String DFA9_maxS =
      "\1\174\1\uffff\1\122\1\114\1\122\3\uffff\1\126\1\131\1\105\2\122" +
          "\1\123\1\117\1\116\1\117\1\122\1\125\1\101\1\117\1\101\2\123\1\117" +
          "\1\uffff\1\117\2\uffff\1\76\1\75\1\uffff\1\55\1\uffff\1\52\7\uffff" +
          "\1\105\1\117\1\116\1\123\1\125\1\117\1\115\1\102\1\101\1\111\1\115" +
          "\1\114\1\130\1\124\1\115\1\101\1\117\1\106\1\172\1\124\1\131\2\172" +
          "\1\124\1\122\1\111\2\172\1\130\1\126\1\116\1\101\1\127\1\116\1\124" +
          "\1\123\1\114\1\117\1\124\1\117\1\102\1\121\3\123\1\107\1\122\1\172" +
          "\1\124\2\104\2\111\2\122\10\uffff\1\101\1\102\1\123\1\120\1\125" +
          "\1\110\1\103\1\116\1\103\1\122\1\102\1\120\1\114\1\116\1\107\1\105" +
          "\1\101\1\117\1\124\2\117\1\101\1\172\1\114\1\102\1\122\1\102\1\106" +
          "\1\105\1\uffff\1\127\1\117\1\172\1\101\2\uffff\1\126\1\124\1\115" +
          "\1\124\1\105\2\uffff\1\124\1\105\1\111\1\105\1\102\1\172\1\107\2" +
          "\105\1\101\1\105\1\101\1\120\1\105\1\122\1\120\1\125\1\110\1\124" +
          "\1\105\1\123\1\107\1\172\1\125\1\103\1\uffff\1\105\2\172\1\116\1" +
          "\121\1\105\1\172\1\124\1\172\1\124\1\122\1\111\1\115\1\105\1\101" +
          "\2\113\1\172\1\101\1\117\1\105\1\172\1\107\1\123\1\122\1\102\1\172" +
          "\1\107\1\115\1\103\1\122\1\uffff\1\172\1\105\1\103\1\172\1\105\1" +
          "\172\1\105\1\122\1\uffff\1\116\1\123\1\122\1\116\1\105\1\111\1\101" +
          "\1\122\1\130\1\122\1\130\1\115\1\124\1\130\1\114\1\172\1\104\1\uffff" +
          "\1\105\1\116\1\122\1\102\1\124\1\125\2\172\1\105\1\101\1\105\4\172" +
          "\1\111\1\uffff\1\105\1\110\1\122\2\uffff\1\107\1\125\1\111\1\uffff" +
          "\1\105\1\uffff\1\122\1\105\1\124\2\116\1\172\1\104\2\172\1\uffff" +
          "\1\114\1\122\1\172\1\uffff\1\105\1\124\1\62\1\172\1\uffff\1\107" +
          "\1\120\1\110\1\101\1\uffff\1\122\1\110\1\uffff\1\122\1\uffff\2\105" +
          "\1\111\2\105\1\103\1\122\1\124\1\122\2\101\1\172\1\101\1\124\1\105" +
          "\1\117\1\124\1\105\1\uffff\2\172\1\124\1\105\1\114\1\105\1\114\2" +
          "\uffff\1\107\1\172\1\122\1\116\4\uffff\1\116\1\123\1\101\2\172\1" +
          "\105\1\107\1\172\1\101\1\123\1\172\1\124\1\172\1\uffff\1\105\2\uffff" +
          "\1\172\1\101\1\120\1\uffff\1\122\1\101\1\172\1\uffff\1\111\1\122" +
          "\1\105\1\114\1\172\1\101\1\137\1\116\1\172\1\132\1\104\1\105\1\122" +
          "\1\123\1\111\1\131\1\116\1\114\1\131\1\uffff\1\116\1\105\1\116\1" +
          "\122\1\105\1\172\2\uffff\1\111\1\116\1\105\1\172\1\124\1\105\1\uffff" +
          "\1\124\1\103\1\107\1\172\1\122\2\uffff\1\172\1\116\1\uffff\1\111" +
          "\1\123\1\uffff\1\172\1\uffff\1\172\1\uffff\1\122\1\101\1\172\1\115" +
          "\1\uffff\1\116\1\105\1\172\1\114\1\uffff\1\122\1\120\1\172\1\uffff" +
          "\1\101\2\172\1\105\1\111\1\117\1\172\1\123\1\172\1\120\1\123\1\116" +
          "\1\124\1\111\1\116\1\uffff\1\117\1\103\1\172\1\uffff\2\172\1\111" +
          "\1\105\1\172\1\uffff\1\62\1\uffff\1\172\1\116\1\172\2\uffff\1\131" +
          "\1\103\1\uffff\1\120\1\107\1\123\1\uffff\1\105\1\62\1\117\1\uffff" +
          "\1\124\2\uffff\1\101\1\117\1\116\1\uffff\1\172\1\uffff\1\105\1\172" +
          "\1\124\1\172\1\116\1\124\1\116\1\105\3\uffff\1\124\1\172\1\uffff" +
          "\1\172\1\uffff\1\124\1\uffff\1\172\1\105\2\172\1\123\1\114\1\172" +
          "\1\117\1\111\1\123\1\116\1\172\1\uffff\1\172\1\uffff\1\123\1\uffff" +
          "\1\107\1\123\1\172\1\123\1\111\2\uffff\1\172\1\uffff\1\172\2\uffff" +
          "\2\172\1\uffff\1\114\1\117\1\105\2\172\2\uffff\3\172\1\uffff\1\172" +
          "\1\117\1\172\4\uffff\1\172\1\116\1\172\6\uffff\1\116\2\uffff\1\172" +
          "\1\uffff\1\172\1\uffff\1\172\2\uffff";
  /**
   * The Dfa 9 accept s.
   */
  static final String DFA9_acceptS =
      "\1\uffff\1\1\3\uffff\1\6\1\7\1\10\21\uffff\1\114\1\uffff\1\121\1" +
          "\122\2\uffff\1\136\1\uffff\1\140\1\uffff\1\142\1\143\1\157\1\160" +
          "\1\162\1\163\1\164\67\uffff\1\123\1\127\1\126\1\125\1\124\1\161" +
          "\1\137\1\141\35\uffff\1\46\4\uffff\1\116\1\32\5\uffff\1\134\1\131" +
          "\31\uffff\1\72\37\uffff\1\132\10\uffff\1\16\21\uffff\1\27\20\uffff" +
          "\1\71\3\uffff\1\101\1\117\3\uffff\1\120\1\uffff\1\13\11\uffff\1" +
          "\151\3\uffff\1\57\4\uffff\1\40\4\uffff\1\133\2\uffff\1\12\1\uffff" +
          "\1\150\22\uffff\1\35\7\uffff\1\77\1\152\4\uffff\1\50\1\51\1\130" +
          "\1\56\15\uffff\1\64\1\uffff\1\73\1\106\3\uffff\1\5\3\uffff\1\14" +
          "\23\uffff\1\75\6\uffff\1\144\1\47\6\uffff\1\54\5\uffff\1\76\1\102" +
          "\2\uffff\1\2\2\uffff\1\33\1\uffff\1\113\1\uffff\1\3\4\uffff\1\11" +
          "\4\uffff\1\145\3\uffff\1\154\17\uffff\1\26\3\uffff\1\34\5\uffff" +
          "\1\55\1\uffff\1\105\3\uffff\1\112\1\100\2\uffff\1\115\3\uffff\1" +
          "\65\3\uffff\1\135\1\uffff\1\21\1\22\3\uffff\1\155\1\uffff\1\37\10" +
          "\uffff\1\31\1\156\1\36\2\uffff\1\61\1\uffff\1\103\1\uffff\1\25\14" +
          "\uffff\1\23\1\uffff\1\24\1\uffff\1\30\5\uffff\1\111\1\146\1\uffff" +
          "\1\4\1\uffff\1\153\1\62\2\uffff\1\147\5\uffff\1\45\1\110\3\uffff" +
          "\1\70\3\uffff\1\15\1\20\1\63\1\66\3\uffff\1\74\1\53\1\42\1\67\1" +
          "\41\1\104\1\uffff\1\107\1\44\1\uffff\1\43\1\uffff\1\17\1\uffff\1" +
          "\52\1\60";
  /**
   * The Dfa 9 special s.
   */
  static final String DFA9_specialS =
      "\u022d\uffff}>";
  /**
   * The Dfa 9 transition s.
   */
  static final String[] DFA9_transitionS = {
      "\2\47\2\uffff\1\47\22\uffff\1\47\1\34\1\51\2\uffff\1\43\1\uffff" +
          "\1\50\1\5\1\6\1\41\1\37\1\7\1\40\1\31\1\42\12\46\1\uffff\1\1" +
          "\1\35\1\33\1\36\2\uffff\1\26\1\11\1\2\1\21\1\17\1\30\1\3\1\23" +
          "\1\15\1\45\1\12\1\24\1\16\1\10\1\13\1\14\1\45\1\20\1\22\1\4" +
          "\1\27\1\25\1\45\1\32\2\45\4\uffff\1\45\1\uffff\32\45\1\uffff" +
          "\1\44",
      "",
      "\1\55\6\uffff\1\56\3\uffff\1\53\2\uffff\1\54\2\uffff\1\52",
      "\1\57",
      "\1\61\3\uffff\1\60\2\uffff\1\62\1\64\10\uffff\1\63",
      "",
      "",
      "",
      "\1\65\1\uffff\1\66\11\uffff\1\67\5\uffff\1\70\1\71",
      "\1\75\6\uffff\1\72\10\uffff\1\73\3\uffff\1\74",
      "\1\76",
      "\1\100\3\uffff\1\77",
      "\1\102\1\uffff\1\101\16\uffff\1\103",
      "\1\104\4\uffff\1\105",
      "\1\106\7\uffff\1\110\5\uffff\1\107",
      "\1\111",
      "\1\113\3\uffff\1\114\11\uffff\1\112",
      "\1\120\3\uffff\1\116\3\uffff\1\115\10\uffff\1\117",
      "\1\123\16\uffff\1\121\1\122",
      "\1\124",
      "\1\126\3\uffff\1\125\5\uffff\1\127",
      "\1\130",
      "\1\133\7\uffff\1\132\1\uffff\1\134\4\uffff\1\131",
      "\1\136\4\uffff\1\135",
      "\1\137",
      "",
      "\1\140",
      "",
      "",
      "\1\142\1\141",
      "\1\144",
      "",
      "\1\146",
      "",
      "\1\146",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\1\151",
      "\1\152",
      "\1\155\1\154\1\153",
      "\1\156\17\uffff\1\157",
      "\1\162\3\uffff\1\161\17\uffff\1\160",
      "\1\163",
      "\1\164",
      "\1\165",
      "\1\166",
      "\1\167",
      "\1\170",
      "\1\171\3\uffff\1\172",
      "\1\173",
      "\1\175\10\uffff\1\174\3\uffff\1\176\3\uffff\1\177",
      "\1\u0080\1\u0081",
      "\1\u0082",
      "\1\u0083",
      "\1\u0084",
      "\1\45\13\uffff\12\45\7\uffff\23\45\1\u0085\6\45\4\uffff\1\45" +
          "\1\uffff\32\45",
      "\1\u0088\15\uffff\1\u0087",
      "\1\u0089",
      "\1\45\13\uffff\12\45\7\uffff\6\45\1\u008a\23\45\4\uffff\1\45" +
          "\1\uffff\32\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u008d",
      "\1\u008e",
      "\1\u008f",
      "\1\45\13\uffff\12\45\7\uffff\3\45\1\u0091\4\45\1\u0090\21\45" +
          "\4\uffff\1\45\1\uffff\32\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0094",
      "\1\u0096\7\uffff\1\u0095",
      "\1\u0097",
      "\1\u0098",
      "\1\u0099",
      "\1\u009a",
      "\1\u009c\15\uffff\1\u009b",
      "\1\u009d",
      "\1\u009f\5\uffff\1\u009e",
      "\1\u00a0",
      "\1\u00a1",
      "\1\u00a2",
      "\1\u00a3",
      "\1\u00a4",
      "\1\u00a5",
      "\1\u00a7\7\uffff\1\u00a6",
      "\1\u00a8",
      "\1\u00aa\4\uffff\1\u00a9",
      "\1\u00ab\5\uffff\1\u00ac",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u00ae",
      "\1\u00af",
      "\1\u00b0",
      "\1\u00b1",
      "\1\u00b2",
      "\1\u00b3",
      "\1\u00b4",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "",
      "\1\u00b5",
      "\1\u00b6",
      "\1\u00b7",
      "\1\u00b9\2\uffff\1\u00b8",
      "\1\u00ba",
      "\1\u00bb",
      "\1\u00bc",
      "\1\u00bd",
      "\1\u00be",
      "\1\u00bf",
      "\1\u00c0",
      "\1\u00c1",
      "\1\u00c2",
      "\1\u00c3",
      "\1\u00c4",
      "\1\u00c5",
      "\1\u00c6",
      "\1\u00c7",
      "\1\u00c8",
      "\1\u00c9",
      "\1\u00cb\15\uffff\1\u00ca",
      "\1\u00cc",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u00ce",
      "\1\u00cf",
      "\1\u00d0",
      "\1\u00d1",
      "\1\u00d2",
      "\1\u00d3",
      "",
      "\1\u00d4",
      "\1\u00d5",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u00d7",
      "",
      "",
      "\1\u00d9\2\uffff\1\u00da\13\uffff\1\u00d8\1\u00db",
      "\1\u00dc",
      "\1\u00dd",
      "\1\u00de",
      "\1\u00df",
      "",
      "",
      "\1\u00e1\16\uffff\1\u00e0",
      "\1\u00e2",
      "\1\u00e3",
      "\1\u00e4",
      "\1\u00e5",
      "\1\45\13\uffff\12\45\7\uffff\10\45\1\u00e7\11\45\1\u00e6\7" +
          "\45\4\uffff\1\45\1\uffff\32\45",
      "\1\u00e9",
      "\1\u00ea",
      "\1\u00eb",
      "\1\u00ec",
      "\1\u00ed",
      "\1\u00ee",
      "\1\u00ef",
      "\1\u00f0",
      "\1\u00f1",
      "\1\u00f2",
      "\1\u00f3",
      "\1\u00f4",
      "\1\u00f5",
      "\1\u00f6",
      "\1\u00f7",
      "\1\u00f8",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u00fa",
      "\1\u00fb",
      "",
      "\1\u00fc",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u00ff",
      "\1\u0100",
      "\1\u0101",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0103",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0105",
      "\1\u0106",
      "\1\u0108\3\uffff\1\u0107",
      "\1\u0109",
      "\1\u010a",
      "\1\u010b",
      "\1\u010c",
      "\1\u010d",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u010f",
      "\1\u0110",
      "\1\u0111",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0113",
      "\1\u0114",
      "\1\u0115",
      "\1\u0116",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0118",
      "\1\u0119",
      "\1\u011a",
      "\1\u011b",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u011d",
      "\1\u011e",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0120",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0122",
      "\1\u0123",
      "",
      "\1\u0124",
      "\1\u0125",
      "\1\u0126",
      "\1\u0127",
      "\1\u0128",
      "\1\u0129",
      "\1\u012a",
      "\1\u012c\10\uffff\1\u012b",
      "\1\u012d",
      "\1\u012e",
      "\1\u012f",
      "\1\u0130",
      "\1\u0131",
      "\1\u0132",
      "\1\u0133",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0135",
      "",
      "\1\u0136",
      "\1\u0137",
      "\1\u0138",
      "\1\u0139",
      "\1\u013a",
      "\1\u013b",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u013e\3\uffff\1\u013f",
      "\1\u0140",
      "\1\u0141",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0146",
      "",
      "\1\u0147",
      "\1\u0148",
      "\1\u0149",
      "",
      "",
      "\1\u014a",
      "\1\u014b",
      "\1\u014c",
      "",
      "\1\u014d",
      "",
      "\1\u014e",
      "\1\u014f",
      "\1\u0150",
      "\1\u0151",
      "\1\u0152",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0154",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "\1\u0157",
      "\1\u0158",
      "\1\45\13\uffff\12\45\7\uffff\22\45\1\u0159\7\45\4\uffff\1\45" +
          "\1\uffff\32\45",
      "",
      "\1\u015b",
      "\1\u015c",
      "\1\u015d",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "\1\u015f",
      "\1\u0160",
      "\1\u0161",
      "\1\u0162",
      "",
      "\1\u0163",
      "\1\u0164",
      "",
      "\1\u0165",
      "",
      "\1\u0166",
      "\1\u0167",
      "\1\u0168",
      "\1\u0169",
      "\1\u016a",
      "\1\u016b",
      "\1\u016c",
      "\1\u016d",
      "\1\u016e",
      "\1\u016f",
      "\1\u0170",
      "\1\45\13\uffff\12\45\7\uffff\23\45\1\u0171\6\45\4\uffff\1\45" +
          "\1\uffff\32\45",
      "\1\u0173",
      "\1\u0174",
      "\1\u0175",
      "\1\u0176",
      "\1\u0177",
      "\1\u0178",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u017b",
      "\1\u017c",
      "\1\u017d",
      "\1\u017e",
      "\1\u017f",
      "",
      "",
      "\1\u0180",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0182",
      "\1\u0183",
      "",
      "",
      "",
      "",
      "\1\u0184",
      "\1\u0185",
      "\1\u0186",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0189",
      "\1\u018a",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u018c",
      "\1\u018d",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u018f",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "\1\u0191",
      "",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0193",
      "\1\u0194",
      "",
      "\1\u0195",
      "\1\u0196",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "\1\u0198",
      "\1\u0199",
      "\1\u019a",
      "\1\u019b",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u019d",
      "\1\u019e",
      "\1\u019f",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u01a1",
      "\1\u01a2",
      "\1\u01a3",
      "\1\u01a4",
      "\1\u01a5",
      "\1\u01a6",
      "\1\u01a7",
      "\1\u01a8",
      "\1\u01a9",
      "\1\u01aa",
      "",
      "\1\u01ab",
      "\1\u01ac",
      "\1\u01ad",
      "\1\u01ae",
      "\1\u01af",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "",
      "\1\u01b1",
      "\1\u01b2",
      "\1\u01b3",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u01b5",
      "\1\u01b6",
      "",
      "\1\u01b7",
      "\1\u01b8",
      "\1\u01b9",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u01bb",
      "",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u01bd",
      "",
      "\1\u01be",
      "\1\u01bf",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "\1\u01c2",
      "\1\u01c3",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u01c5",
      "",
      "\1\u01c6",
      "\1\u01c7",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u01c9",
      "",
      "\1\u01ca",
      "\1\u01cb",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "\1\u01cd",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u01d0",
      "\1\u01d1",
      "\1\u01d2",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u01d4",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u01d6",
      "\1\u01d7",
      "\1\u01d8",
      "\1\u01d9",
      "\1\u01da",
      "\1\u01db",
      "",
      "\1\u01dc",
      "\1\u01dd",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u01e1",
      "\1\u01e2",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "\1\u01e4",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u01e6",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "",
      "\1\u01e8",
      "\1\u01e9",
      "",
      "\1\u01ea",
      "\1\u01eb",
      "\1\u01ec",
      "",
      "\1\u01ed",
      "\1\u01ee",
      "\1\u01ef",
      "",
      "\1\u01f0",
      "",
      "",
      "\1\u01f1",
      "\1\u01f2",
      "\1\u01f3",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "\1\u01f5",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u01f7",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u01f9",
      "\1\u01fa",
      "\1\u01fb",
      "\1\u01fc",
      "",
      "",
      "",
      "\1\u01fd",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "\1\u0200",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0202",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0205",
      "\1\u0206",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0208",
      "\1\u0209",
      "\1\u020a",
      "\1\u020b",
      "\1\45\13\uffff\12\45\7\uffff\22\45\1\u020c\7\45\4\uffff\1\45" +
          "\1\uffff\32\45",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "\1\u020f",
      "",
      "\1\u0210",
      "\1\u0211",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0213",
      "\1\u0214",
      "",
      "",
      "\1\45\13\uffff\12\45\7\uffff\22\45\1\u0215\7\45\4\uffff\1\45" +
          "\1\uffff\32\45",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "\1\u021a",
      "\1\u021b",
      "\1\u021c",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0223",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "",
      "",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "\1\u0226",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "",
      "",
      "",
      "",
      "",
      "\1\u0228",
      "",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      "\1\45\13\uffff\12\45\7\uffff\22\45\1\u022a\7\45\4\uffff\1\45" +
          "\1\uffff\32\45",
      "",
      "\1\45\13\uffff\12\45\7\uffff\32\45\4\uffff\1\45\1\uffff\32" +
          "\45",
      "",
      ""
  };

  /**
   * The Dfa 9 eot.
   */
  static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
  /**
   * The Dfa 9 eof.
   */
  static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
  /**
   * The Dfa 9 min.
   */
  static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
  /**
   * The Dfa 9 max.
   */
  static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
  /**
   * The Dfa 9 accept.
   */
  static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
  /**
   * The Dfa 9 special.
   */
  static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
  /**
   * The Dfa 9 transition.
   */
  static final short[][] DFA9_transition;

  static {
    int numStates = DFA9_transitionS.length;
    DFA9_transition = new short[numStates][];
    for (int i = 0; i < numStates; i++) {
      DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
    }
  }

  /**
   * The type Dfa 9.
   */
  class DFA9 extends DFA {

    /**
     * Instantiates a new Dfa 9.
     *
     * @param recognizer the recognizer
     */
    public DFA9(BaseRecognizer recognizer) {
      this.recognizer = recognizer;
      this.decisionNumber = 9;
      this.eot = DFA9_eot;
      this.eof = DFA9_eof;
      this.min = DFA9_min;
      this.max = DFA9_max;
      this.accept = DFA9_accept;
      this.special = DFA9_special;
      this.transition = DFA9_transition;
    }

    public String getDescription() {
      return "1:1: Tokens : ( T__62 | T__63 | T__64 | T__65 | T__66 | T__67 | T__68 | T__69 | T__70 | T__71 | T__72 | T__73 | T__74 | T__75 | T__76 | T__77 | T__78 | T__79 | T__80 | T__81 | T__82 | T__83 | T__84 | T__85 | T__86 | T__87 | T__88 | T__89 | T__90 | T__91 | T__92 | T__93 | T__94 | T__95 | T__96 | T__97 | T__98 | T__99 | T__100 | T__101 | T__102 | T__103 | T__104 | T__105 | T__106 | T__107 | T__108 | T__109 | T__110 | T__111 | T__112 | T__113 | T__114 | T__115 | T__116 | T__117 | T__118 | T__119 | T__120 | T__121 | T__122 | T__123 | T__124 | T__125 | T__126 | T__127 | T__128 | T__129 | T__130 | T__131 | T__132 | T__133 | T__134 | T__135 | T__136 | T__137 | T__138 | OR | AND | XOR | EQ | BANGEQ | LTGT | GT | GE | LT | LE | LIKE | IS | NOT | NULL | IN | BETWEEN | PLUS | SUB | STAR | SLASH | PERCENT | BARBAR | ROWID | NUMBER | VARCHAR2 | NVARCHAR2 | BYTE | CHAR | DATE | TIMESTAMP | BEFORE | PRIMARY | DEFAULT | IDENTIFIER | INT | COMMENT | WS | STRING | QUOTED_NAME );";
    }
  }


}